@page "/login"
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Login> Logger
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<div class="row">
    <div class="col-md-4">
        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input type="text" class="form-control" id="username" @bind="username" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" id="password" @bind="password" />
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        <button class="btn btn-primary" @onclick="ValidateCredentials">Login</button>
    </div>
</div>

@code {
    private string username = "";
    private string password = "";
    private string errorMessage = "";

    private async Task ValidateCredentials()
    {
        Logger.LogInformation("Login attempt for username: {Username}", username);
        
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            errorMessage = "Username and password are required.";
            Logger.LogWarning("Login failed: empty credentials for username: {Username}", username);
            return;
        }

        var useApi = Configuration.GetValue<bool>("Authentication:UseApi");

        if (useApi)
        {
            await ValidateWithApi();
        }
        else
        {
            await ValidateWithConfig();
        }
    }

    private async Task ValidateWithApi()
    {
        Logger.LogInformation("Validating credentials with API for username: {Username}", username);
        
        try
        {
            var httpClient = HttpClientFactory.CreateClient("AuthApi");
            var request = new SampleProject.Models.AuthenticationRequest
            {
                Username = username,
                Password = password
            };

            var response = await httpClient.PostAsJsonAsync("/api/authenticate", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SampleProject.Models.AuthenticationResponse>();
                
                if (result?.IsValid == true)
                {
                    errorMessage = "";
                    Logger.LogInformation("Login successful via API for username: {Username}", username);
                    await JSRuntime.InvokeVoidAsync("alert", "Login successful");
                }
                else
                {
                    errorMessage = "Username or password is not right.";
                    Logger.LogWarning("Login failed via API for username: {Username}", username);
                }
            }
            else
            {
                errorMessage = "Authentication service is unavailable.";
                Logger.LogError("Authentication API returned unsuccessful status code: {StatusCode}", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Authentication service is unavailable.";
            Logger.LogError(ex, "Error calling authentication API for username: {Username}", username);
        }
    }

    private async Task ValidateWithConfig()
    {
        Logger.LogInformation("Validating credentials with config for username: {Username}", username);
        
        var configUsername = Configuration["Authentication:Username"];
        var configPassword = Configuration["Authentication:Password"];

        if (string.IsNullOrEmpty(configUsername) || string.IsNullOrEmpty(configPassword))
        {
            errorMessage = "Authentication configuration is missing.";
            Logger.LogError("Authentication configuration is missing");
            return;
        }

        if (username == configUsername && password == configPassword)
        {
            errorMessage = "";
            Logger.LogInformation("Login successful via config for username: {Username}", username);
            await JSRuntime.InvokeVoidAsync("alert", "Login successful");
        }
        else
        {
            if (username != configUsername)
            {
                errorMessage = "Username is not right.";
                Logger.LogWarning("Login failed: incorrect username {Username}", username);
            }
            else
            {
                errorMessage = "Password is not right.";
                Logger.LogWarning("Login failed: incorrect password for username: {Username}", username);
            }
        }
    }
}
